<!--
***********************************************************************************************
Microsoft.Silverlight.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (C) Microsoft Corporation. All rights reserved.
***********************************************************************************************
-->

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.GetSilverlightFrameworkPath" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.CompileXaml"  AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.ValidateXaml" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.ValidateReferences"  AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.CreateSilverlightAppManifest" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.CreateHtmlTestPage" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.ValidateSilverlightFrameworkPaths" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.CategorizeSilverlightReferences" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.GetXapArchivePaths" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.GetTargetFrameworkIdentifier" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.CreateMDILProjectFiles" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />
  <UsingTask TaskName="Microsoft.Silverlight.Build.Tasks.PackagePlatformExtensions" AssemblyFile="Microsoft.Silverlight.WindowsPhone.Build.Tasks.dll" />

  <PropertyGroup>
    <ImportByWildcardBeforeWindowsPhoneCommonTargets Condition="'$(ImportByWildcardBeforeWindowsPhoneCommonTargets)' == ''">true</ImportByWildcardBeforeWindowsPhoneCommonTargets>
    <ImportByWildcardAfterWindowsPhoneCommonTargets Condition="'$(ImportByWildcardAfterWindowsPhoneCommonTargets)' == ''">true</ImportByWildcardAfterWindowsPhoneCommonTargets>
  </PropertyGroup>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\ImportBefore\*" Condition="'$(ImportByWildcardBeforeMicrosoftCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath32)\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\ImportBefore')"/>

  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\Microsoft.$(TargetFrameworkIdentifier).PreImport.targets" Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\Microsoft.$(TargetFrameworkIdentifier).PreImport.targets')"/>
  <Import Project="Microsoft.Phone.Packaging.targets"/>

  <PropertyGroup>
    <ValidateXaml Condition="'$(ValidateXaml)' == ''">true</ValidateXaml>
    <ThrowErrorsInValidation Condition="'$(ThrowErrorsInValidation)' == ''">true</ThrowErrorsInValidation>
    <ExtMapFileValidationAsError Condition="'$(ExtMapFileValidationAsError)' == ''">false</ExtMapFileValidationAsError>
    <OutOfBrowserPlusAppCachingIsSupported Condition="'$(OutOfBrowserPlusAppCachingIsSupported)' == ''">false</OutOfBrowserPlusAppCachingIsSupported>
    <FrameworkRegistryBaseWithVersion>$(FrameworkRegistryBase)\$(TargetFrameworkVersion)</FrameworkRegistryBaseWithVersion>
    <RuntimePathRegistryKey Condition="'$(RuntimePathRegistryKey)' == ''">$(FrameworkRegistryBaseWithVersion)\ReferenceAssemblies</RuntimePathRegistryKey>
    <RuntimeVersionRegistryKey Condition="'$(RuntimeVersionRegistryKey)' == ''">$(FrameworkRegistryBaseWithVersion)\ReferenceAssemblies</RuntimeVersionRegistryKey>
    <TargetFrameworkMonikerDisplayName Condition="'$(TargetFrameworkMonikerDisplayName)' == ''">Silverlight 4</TargetFrameworkMonikerDisplayName>
    <ReferencesValidationRequiredForWindowsPhone Condition="'$(ReferencesValidationRequiredForWindowsPhone)' == ''">False</ReferencesValidationRequiredForWindowsPhone>
    <!--If the path to the sign tool is not set, assume the SDK path -->
    <SignToolPath Condition="'$(SignToolPath)' == ''">$(FrameworkSDKRoot)bin</SignToolPath>
    <AvailablePlatforms>$(AvailablePlatforms),ARM</AvailablePlatforms>
  </PropertyGroup>

  <!--
    ============================================================
    Adds all SilverlightPages to the $(Resource) collection
    ============================================================
    -->
  <ItemGroup>
    <!-- Add Silverlight Page items to $(Resource) -->
    <Resource Include="@(Page)" />
    <Resource Include="@(ApplicationDefinition)" />
  </ItemGroup>



  <!-- 
    ================================================================
                        GetFrameworkPaths
                        
    Override GetFrameworkPaths in Microsoft.Common.targets so that 
    references resolve to the silverlight assemblies rather than the 
    desktop CLR assemblies
    ================================================================
     -->
  <Target
      Name="GetFrameworkPaths"
      DependsOnTargets="$(GetFrameworkPathsDependsOn)"
     >

    <GetSilverlightFrameworkPath
        RegistryBase="$(FrameworkRegistryBaseWithVersion)"
        RuntimePathRegistryKey="$(RuntimePathRegistryKey)"
        RuntimeVersionRegistryKey="$(RuntimeVersionRegistryKey)"
        AdditionalRegistryBasePaths="$([System.IO.Path]::Combine($(WindowsPhone71RegistryBase), $(WindowsPhone71RegistryBaseVersion)))"
        >
      <Output TaskParameter="SilverlightPath" PropertyName="TargetFrameworkDirectory" Condition="'$(TargetFrameworkDirectory)' == ''"/>
      <Output TaskParameter="SilverlightSDKPaths" ItemName="_TargetFrameworkSDKDirectoryItem" Condition="'$(TargetFrameworkSDKDirectory)' == ''"/>
      <Output TaskParameter="SilverlightRuntimeVersion" PropertyName="SilverlightRuntimeVersion" Condition="'$(SilverlightRuntimeVersion)' == ''"/>
    </GetSilverlightFrameworkPath>

    <!-- Reset some items from the above task. Will remove when we merge with SL build system -->
    <PropertyGroup>
      <_FullFrameworkReferenceAssemblyPaths>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries($(TargetFrameworkIdentifier), $(TargetFrameworkVersion), ''))</_FullFrameworkReferenceAssemblyPaths>
      <TargetFrameworkDirectory>$([Microsoft.Build.Utilities.ToolLocationHelper]::GetPathToStandardLibraries($(TargetFrameworkIdentifier), $(TargetFrameworkVersion), ''))</TargetFrameworkDirectory>
    </PropertyGroup>

    <PropertyGroup>
      <FrameworkPathOverride>$(TargetFrameworkDirectory)</FrameworkPathOverride>
      <TargetFrameworkSDKDirectory Condition="'$(TargetFrameworkSDKDirectory)' == ''">@(_TargetFrameworkSDKDirectoryItem)</TargetFrameworkSDKDirectory>
      <SdkPath>$(TargetFrameworkSDKDirectory)</SdkPath>
    </PropertyGroup>

    <ItemGroup>
      <_TargetFrameworkDirectoryItem Include="$(TargetFrameworkDirectory)"/>
    </ItemGroup>
    <ItemGroup>
      <_TargetFrameworkSDKDirectoryItem Include="$(TargetFrameworkSDKDirectory)" Condition="'@(_TargetFrameworkSDKDirectoryItem)' == ''"/>
    </ItemGroup>

    <!-- Create the assembly search paths property. This defines where\how references are resolved -->
    <CreateProperty Value="{CandidateAssemblyFiles};$(ReferencePath);{HintPathFromItem};{TargetFrameworkDirectory};$(TargetFrameworkSDKDirectory);{WinMDFoldersEx:Software\Microsoft\Microsoft SDKs\$(TargetPlatformIdentifier),8.1};{RawFileName};$(OutDir)">
      <Output TaskParameter="Value" PropertyName="AssemblySearchPaths"/>
    </CreateProperty>

    <ValidateSilverlightFrameworkPaths
        TargetFrameworkDirectory = "$(TargetFrameworkDirectory)"
        />

  </Target>


  <!--
    ================================================================
                        GetReferenceAssemblyPaths

    We override to do nothing. This prevents the default implementation
    from setting the V3.0 and v3.5 framework paths
    ================================================================
    -->
  <Target
      Name="GetReferenceAssemblyPaths"
      DependsOnTargets="$(GetReferenceAssemblyPathsDependsOn)">

  </Target>

  <!-- 
    We want to zip after the project has built everything.
    -->
  <PropertyGroup>
    <PrepareForRunDependsOn>
      _GetPackageProperties;
      CategorizeSilverlightReferences;
      ValidateXapFilenames;
      $(PrepareForRunDependsOn);
      ValidateXaml;
      CreateSilverlightAppManifest;
      CreateMDILProjectFiles;
      PackagePlatformExtensions;
      XapPackager;
      CreateHtmlTestPage;
    </PrepareForRunDependsOn>
  </PropertyGroup>

  <PropertyGroup>
    <BuiltProjectOutputGroupDependsOn>
      $(BuiltProjectOutputGroupDependsOn);
      CategorizeSilverlightReferences;
    </BuiltProjectOutputGroupDependsOn>
  </PropertyGroup>

  <!-- 
    We want to add the silverlight page files to the $(Resource) collection
    -->
  <PropertyGroup>
    <PrepareResourcesDependsOn>
      $(PrepareResourcesDependsOn)
    </PrepareResourcesDependsOn>
  </PropertyGroup>

  <!--   
    ================================================================
                         MarkupCompilePass1
    ================================================================
    -->
  <PropertyGroup>
    <CompileXamlDependsOn>
      GetFrameworkPaths;
    </CompileXamlDependsOn>
  </PropertyGroup>

  <Target Name="MarkupCompilePass1"
        DependsOnTargets="$(CompileXamlDependsOn)"
        Condition="'@(Page)@(ApplicationDefinition)' != '' " >

    <CompileXaml
           LanguageSourceExtension="$(DefaultLanguageSourceExtension)"
           Language="$(Language)"
           SilverlightPages="@(Page)"
           SilverlightApplications="@(ApplicationDefinition)"
           ProjectPath="$(MSBuildProjectFullPath)"
           RootNamespace="$(RootNamespace)"
           AssemblyName="$(AssemblyName)"
           OutputPath="$(IntermediateOutputPath)"
           SkipLoadingAssembliesInXamlCompiler="$(SkipLoadingAssembliesInXamlCompiler)"
           TargetFrameworkDirectory="$(TargetFrameworkDirectory)"
           TargetFrameworkSDKDirectory="$(TargetFrameworkSDKDirectory)"
           ReferenceAssemblies ="@(ReferencePath);@(InferredReference->'$(TargetFrameworkDirectory)\%(Identity)')"
               >

      <Output ItemName="Compile" TaskParameter="GeneratedCodeFiles" />

      <!-- Add to the list list of files written. It is used in Microsoft.Common.Targets to clean up 
                 for a next clean build 
              -->
      <Output ItemName="FileWrites" TaskParameter="GeneratedCodeFiles" />
      <Output ItemName="_GeneratedCodeFiles" TaskParameter="GeneratedCodeFiles" />

    </CompileXaml>

    <Message Text="(Out) GeneratedCodeFiles: '@(_GeneratedCodeFiles)'" Condition="'$(MSBuildTargetsVerbose)'=='true'"/>
  </Target>


  <!--   
    ================================================================
                         ValidateReferences
    ================================================================
    -->
  <Target Name="ValidateReferences"
        Condition="'$(ReferencesValidationRequiredForWindowsPhone)' == 'true'" >

    <ValidateReferences
     TargetFrameworkDirectory="$(TargetFrameworkDirectory)"
           ReferenceValidationRules="$(WindowsPhoneReferenceValidationRules)"
           ReferenceAssemblies ="@(ReferencePath);@(InferredReference->'$(TargetFrameworkDirectory)\%(Identity)')"
               >
    </ValidateReferences>
  </Target>

  <!--   
    ================================================================
                           ValidateXaml
    ================================================================
    -->
  <PropertyGroup>
    <ValidateXamlDependsOn>
      Compile;
      ValidateReferences;
    </ValidateXamlDependsOn>
  </PropertyGroup>

  <Target Name="ValidateXaml"
        DependsOnTargets="$(ValidateXamlDependsOn)"
        Condition="'@(Page)@(ApplicationDefinition)' != '' and '$(ValidateXaml)' == 'true'" >

    <ValidateXaml
           ReferenceAssemblies ="@(ReferencePath);@(InferredReference->'$(TargetFrameworkDirectory)\%(Identity)')"
           ProjectAssemblies = "@(BuiltProjectOutputGroupKeyOutput)"
           SilverlightPages="@(Page)"
           SilverlightApplications="@(ApplicationDefinition)"
           ProjectPath="$(MSBuildProjectFullPath)"
           AssemblyName="$(AssemblyName)"
           OutputPath="$(IntermediateOutputPath)"
           ShouldThrow="$(ThrowErrorsInValidation)"
           TargetFrameworkDirectory="$(TargetFrameworkDirectory)"
           TargetFrameworkSDKDirectory="$(TargetFrameworkSDKDirectory)"
               >
    </ValidateXaml>
  </Target>

  <PropertyGroup>
    <XapPackagerDependsOn>
      _CreateSLProperties;
      MarkupCompilePass1;
      ValidateXaml;
      FilesToXap;
      CreateSilverlightAppManifest;
      CreateMDILProjectFiles;
    </XapPackagerDependsOn>
  </PropertyGroup>

  <!--
    ============================================================
                              AssignTargetPaths

    This target is overriden so that we can add the  <TargetPath> tags for 
    items of type SilverlighPage.
    ============================================================
    -->
  <Target
      Name="AssignTargetPaths"
      DependsOnTargets="$(AssignTargetPathsDependsOn);_CreateSLProperties">

    <ItemGroup>
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <!-- AssignTargetPath generates TargetPath metadata that is consumed by CreateManifestResourceNames target for manifest name generation 
             We include SilverlightPages here as well
        -->
    <AssignTargetPath Files="@(EmbeddedResource)" RootFolder="$(MSBuildProjectDirectory)">
      <Output TaskParameter="AssignedFiles" ItemName="_Temporary" />
    </AssignTargetPath>


    <ItemGroup>
      <!-- Replace items in EmbeddedResource with the items emitted by the AssignTargetPath task that have the TargetPath metadata -->
      <EmbeddedResource Remove="@(_Temporary)" />
      <EmbeddedResource Include="@(_Temporary)" />
      <_Temporary Remove="@(_Temporary)" />
    </ItemGroup>

    <AssignTargetPath Files="@(Content)" RootFolder="$(MSBuildProjectDirectory)">
      <Output TaskParameter="AssignedFiles" ItemName="ContentWithTargetPath" />
    </AssignTargetPath>

    <AssignTargetPath Files="@(None)" RootFolder="$(MSBuildProjectDirectory)">
      <Output TaskParameter="AssignedFiles" ItemName="_NoneWithTargetPath" />
    </AssignTargetPath>

    <AssignTargetPath Files="@(BaseApplicationManifest)" RootFolder="$(MSBuildProjectDirectory)">
      <Output TaskParameter="AssignedFiles" ItemName="_DeploymentBaseManifestWithTargetPath"/>
    </AssignTargetPath>

    <AssignTargetPath Files="@(None)" RootFolder="$(MSBuildProjectDirectory)" Condition="'@(_DeploymentBaseManifestWithTargetPath)'=='' and '%(None.Extension)'=='.manifest'">
      <Output TaskParameter="AssignedFiles" ItemName="_DeploymentBaseManifestWithTargetPath" />
    </AssignTargetPath>

    <!-- The following adds the appManifest.xaml and xap output files to the built outputs group. -->
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Include="$(OutDir)AppManifest.xaml" Condition="'$(GenerateSilverlightManifest)'=='true'">
        <TargetPath>AppManifest.xaml</TargetPath>
      </BuiltProjectOutputGroupOutput>
      <BuiltProjectOutputGroupOutput Include="$(XapOutputFile)" Condition="'$(XapOutputs)'=='true'">
        <DeployableSilverlightFile>true</DeployableSilverlightFile>
        <TargetPath>$(XapFilename)</TargetPath>
      </BuiltProjectOutputGroupOutput>
    </ItemGroup>

  </Target>

  <!--
    ============================================================
                    FilesToXap

    This target collects the files from the Built, Satellite, and 
    content output groups to create a collection of files to be
    zipped
    ============================================================
    -->
  <PropertyGroup>
    <FilesToXapDependsOn>CreateSilverlightAppManifest;CategorizeSilverlightReferences;FilterPackagingOutPuts;WMAppManifestWinMDRegistration;WMAppManifestBGAgentRegistration;ValidateWMAppManifest;XapImageFiles;</FilesToXapDependsOn>
    <FilesToXapDependsOn Condition="'$(GetCopyToOutputDirectoryContentProjectItemsDependsOn)'!=''">$(FilesToXapDependsOn);GetCopyToOutputDirectoryContentProjectItems</FilesToXapDependsOn>
  </PropertyGroup>
  <Target
      Name="FilesToXap"
      Outputs="@(XapFilesInputCollection)"
      DependsOnTargets="$(FilesToXapDependsOn)">

    <ItemGroup>
      <!-- Include the built output, satellites and content files-->
      <XapFilesList Include="@(BuiltProjectOutputGroupKeyOutput)"/>
      <XapFilesList Include="@(_SilverlightPackagedSatelliteAssemblies)" />
      <XapFilesList Include="@(ContentWithTargetPath)" Condition="'%(ContentWithTargetPath.OriginalItemSpec)' != '$(TokenBackgroundImage)' and '%(ContentWithTargetPath.OriginalItemSpec)' != '$(ApplicationIconImage)'"/>
      <XapFilesList Include="$(AppManifestFilename)"/>
      <!-- Add support for pulling in Contentproj output for SL+XNA -->
      <XapFilesList Include="@(AllItemsFullPathWithTargetPath->'$(OutDir)%(TargetPath)')" Condition="(('$(TokenBackgroundImage)' != '' and '%(AllItemsFullPathWithTargetPath.ItemSpec)' != '$(TokenBackgroundImage)') or ('$(TokenBackgroundImage)' == '')) and '%(AllItemsFullPathWithTargetPath.ItemSpec)' != '$(ApplicationIconImage)'"/>
      <XapFilesList Include="@(FilteredPackagingOutputs)"/>
      <XapFilesList Include="$(WMAppManifestOutput)"/>
      <XapFilesList Include="@(XapFilesInputImageCollection)"/>
      <XapFilesList Include="$(IntermediateOutputPath)MDILProjectFiles.xml"/>
      <XapFilesList Include="@(FinalAppxManifest)"/>
    </ItemGroup>

    <RemoveDuplicatePayload Inputs="@(XapFilesList)">
      <Output TaskParameter="Filtered" ItemName="PackagePayload" />
    </RemoveDuplicatePayload>

    <ItemGroup>
      <!-- Include the built output, satellites and content files-->
      <XapFilesInputCollection Include="@(PackagePayload)"/>
    </ItemGroup>
  </Target>

	<!--
    ============================================================
                    CreateSilverlightAppManifest

    This target creates an AppManifest.xaml file in the output
    folder.
    ============================================================
    -->
	<PropertyGroup>
		<CreateSilverlightAppManifestDependsOn>AssignTargetPaths;CategorizeSilverlightReferences</CreateSilverlightAppManifestDependsOn>
	</PropertyGroup>
	<Target
		Name="CreateSilverlightAppManifest"
		DependsOnTargets="$(CreateSilverlightAppManifestDependsOn)"
		Condition="'$(GenerateSilverlightManifest)'=='true'">

		<CreateSilverlightAppManifest
			PackagedAssemblies="@(_SilverlightPackagedAssemblies)"
			SatelliteAssemblies="@(_SilverlightPackagedSatelliteAssemblies)"
			PlatformExtensionAssemblies="@(_SilverlightPlatformExtensions)"
			EntryPointAssembly="@(IntermediateAssembly->'%(FileName)')"
			EntryPointType="$(SilverlightAppEntry)"
			ProjectPath="$(MSBuildProjectFullPath)"
			SupportedCultures="$(SupportedCultures)"
			SilverlightRuntimeVersion="$(SilverlightRuntimeVersion)"
			AppManifestTemplateFile="$(SilverlightManifestTemplate)"
			UsePlatformExtensions="$(UsePlatformExtensions)"
			EnableOutOfBrowser="$(EnableOutOfBrowser)"
			OutOfBrowserSettingsFile="$(OutOfBrowserSettingsFile)"
			OutOfBrowserPlusAppCachingIsSupported="$(OutOfBrowserPlusAppCachingIsSupported)"
			OutputPath="$(OutDir)"
            >
			<Output PropertyName="AppManifestFilename" TaskParameter="AppManifestFilename" />

			<!--Add output to Clean-->
			<Output ItemName="FileWrites" TaskParameter="AppManifestFilename" />

		</CreateSilverlightAppManifest>

	</Target>
	<!--
    ============================================================
                    CreateMDILProjectFiles

    This target creates an MDILProjectFiles.xml file in the output
    folder.
    ============================================================
    -->
  <PropertyGroup>
    <CreateMDILProjectFilesDependsOn>AssignTargetPaths;CategorizeSilverlightReferences;FilesToXap</CreateMDILProjectFilesDependsOn>
  </PropertyGroup>
  <Target
    Name="CreateMDILProjectFiles"
    DependsOnTargets="$(CreateMDILProjectFilesDependsOn)"
    Condition="'$(XapOutputs)'=='true'"
    >
    <!-- Return the list of files (in archive-path format) that will actually end up in the XAP. -->
    <GetXapArchivePaths
      ProjectFiles="@(XapFilesInputCollection)">
      <Output TaskParameter="ArchivePaths" ItemName="_ArchivePaths"/>
    </GetXapArchivePaths>

    <!-- Find our Appx and PCL assemblies. -->
    <GetTargetFrameworkIdentifier
      ArchivePaths="@(_ArchivePaths)"
      TargetDir="$(TargetDir)"
      >
      <Output TaskParameter="WindowsPhoneApp" ItemName="_WindowsPhoneAppAssemblies" />
      <Output TaskParameter="Portable" ItemName="_PortableAssemblies" />
    </GetTargetFrameworkIdentifier>

    <!-- Find all the dependent project assemblies required the project Appx assemblies. -->
    <ResolveAssemblyReference
      AssemblyFiles="@(_WindowsPhoneAppAssemblies)"
      SearchPaths="$(TargetDir)"
      AutoUnify="false"
      >
      <Output TaskParameter="ResolvedFiles" ItemName="_ResolvedWindowsPhoneAppAssemblies"/>
      <Output TaskParameter="ResolvedDependencyFiles" ItemName="_ResolvedWindowsPhoneAppDependencies"/>
    </ResolveAssemblyReference>

    <!-- With our list of XAP files and APPX files , write the MDILProjectFile.xml to disk. -->
    <CreateMDILProjectFiles
      ArchivePaths="@(_ArchivePaths)"
      TargetDir="$(TargetDir)"
      WindowsPhoneAppAssemblies="@(_ResolvedWindowsPhoneAppAssemblies)"
      WindowsPhoneAppDependencies="@(_ResolvedWindowsPhoneAppDependencies)"
      PortableAssemblies="@(_PortableAssemblies)"
      ProjectPath="$(MSBuildProjectFullPath)"
      OutputPath="$(IntermediateOutputPath)"
            >
      <Output TaskParameter="MDILProjectFilesPath" PropertyName="MDILProjectFilesPath" />

      <!--Add output to Clean-->
      <Output ItemName="FileWrites" TaskParameter="MDILProjectFilesPath" />

    </CreateMDILProjectFiles>

  </Target>

	<!--
    ============================================================
                    _PreCategorizeSilverlightReferences

    This is here to make sure the variable BuildingProject is
    set to true. This is necessary for CategorizeSilverlightReferences
    to work correctly. ResolveReferences will not calculate 
    dependencies without it when asking for output groups.
    ============================================================
    -->
  <Target Name="_PreCategorizeSilverlightReferences">

    <PropertyGroup>
      <!-- Remember the value. It will be set back in CategorizeSilverlightReferences -->
      <_OriginalBuildingProject>$(BuildingProject)</_OriginalBuildingProject>
      <BuildingProject>true</BuildingProject>
    </PropertyGroup>

  </Target>

  <!--
        The ComputeIntermediateSatelliteAssembliesDependsOn is missing the PrepareResourceNames
        dependency. We fix it here since CategorizeSilverlightReferences is dependentant on  
        determination of the satellite assemblies
    -->
  <PropertyGroup>
    <ComputeIntermediateSatelliteAssembliesDependsOn>
      PrepareResourceNames;
      $(ComputeIntermediateSatelliteAssembliesDependsOn);
    </ComputeIntermediateSatelliteAssembliesDependsOn>
  </PropertyGroup>

  <!--
    ============================================================
                    CategorizeSilverlightReferences

       Looks at all references and splits them into 3 lists: 
            Satellites which match the specified cultures list
            packagedAssemblies
            platformExtensions
    ============================================================
    -->
  <PropertyGroup>
    <CategorizeSilverlightReferencesDependsOn>
      _CreateSLProperties;
      AssignTargetPaths;
      _PreCategorizeSilverlightReferences;
      ResolveReferences;
      ComputeIntermediateSatelliteAssemblies;
    </CategorizeSilverlightReferencesDependsOn>
  </PropertyGroup>
  <Target
      Name="CategorizeSilverlightReferences"
      DependsOnTargets="$(CategorizeSilverlightReferencesDependsOn)">

    <CategorizeSilverlightReferences
        ReferencedCopyLocalAssemblies="@(ReferenceCopyLocalPaths);@(ReferenceComWrappersToCopyLocal);"
        BuiltSatellites="@(IntermediateSatelliteAssembliesWithTargetPath)"
        SupportedCultures="$(SupportedCultures)"
        UsePlatformExtensions="$(UsePlatformExtensions)"
        OutputPath="$(OutDir)"
        ProjectPath="$(MSBuildProjectFullPath)"
        ExtMapFileValidationAsError="$(ExtMapFileValidationAsError)"
            >
      <Output ItemName="_SilverlightPackagedAssemblies" TaskParameter="SilverlightPackagedAssemblies" />
      <Output ItemName="_SilverlightPackagedSatelliteAssemblies" TaskParameter="SilverlightPackagedSatelliteAssemblies" />
      <Output ItemName="_SilverlightPlatformExtensions" TaskParameter="SilverlightPlatformExtensions" />
      <Output ItemName="_SilverlightPlatformExtensionSatellites" TaskParameter="SilverlightPlatformExtensionSatellites" />
      <Output ItemName="SilverlightExtensionPackages" TaskParameter="SilverlightExtensionPackages" />
    </CategorizeSilverlightReferences>

    <!--Add to built output group and set the PlatformExtension metaproperty-->
    <ItemGroup>
      <BuiltProjectOutputGroupOutput Include="@(SilverlightExtensionPackages->'%(FullPath)')" Condition="'$(UsePlatformExtensions)' == 'true'">
        <DeployableSilverlightFile>true</DeployableSilverlightFile>
        <TargetPath>%(Filename)%(Extension)</TargetPath>
      </BuiltProjectOutputGroupOutput>
    </ItemGroup>
    <PropertyGroup>
      <!-- Reset the variable back to the original value -->
      <BuildingProject>$(_OriginalBuildingProject)</BuildingProject>
    </PropertyGroup>

  </Target>

  <!--   
    ================================================================
                           PackagePlatformExtensions
    This task packages the platform extensions into .zip files
    and places them in the output folder.
    ================================================================
    -->
  <PropertyGroup>
    <PackagePlatformExtensionsDependsOn>
      _CreateSLProperties;
      CategorizeSilverlightReferences;
      CreateSilverlightAppManifest;
    </PackagePlatformExtensionsDependsOn>
  </PropertyGroup>

  <Target Name="PackagePlatformExtensions"
        DependsOnTargets="$(XapPackagerDependsOn)"
        Condition="'$(UsePlatformExtensions)'=='true'"
          >

    <PackagePlatformExtensions
        PlatformExtensions="@(_SilverlightPlatformExtensions)"
        PlatformExtensionSatellites="@(_SilverlightPlatformExtensionSatellites)"
        OutputPath="$(OutDir)"
        ProjectPath="$(MSBuildProjectFullPath)"
        IntermediateOutputPath="$(IntermediateOutputPath)"
            >
      <Output ItemName="_CreatedSilverlightExtensionPackages" TaskParameter="CreatedSilverlightExtensionPackages" />

      <!--Add outputs to Clean-->
      <Output ItemName="FileWrites" TaskParameter="CreatedSilverlightExtensionPackages" />

    </PackagePlatformExtensions>

  </Target>

  <!--
    ============================================================
                        CreateHtmlTestPage

    This target creates a TestPage.Html file in the output
    folder. This is used by ViewInBrowser and F5 scenarios
    ============================================================
    -->
  <Target
      Name="CreateHtmlTestPage"
      Condition="'$(CreateTestPage)'=='true'">

    <CreateHtmlTestPage
        PackageFileName="$(XapFilename)"
        ProjectPath="$(MSBuildProjectFullPath)"
        OutputPath="$(OutDir)"
        TestPageFileName="$(TestPageFileName)"
        SilverlightRuntimeVersion="$(SilverlightRuntimeVersion)"
            >
      <Output ItemName="TestPageFile" TaskParameter="TestPageFile" />

      <!--Add output to Clean-->
      <Output ItemName="FileWrites" TaskParameter="TestPageFile" />

    </CreateHtmlTestPage>

  </Target>

  <!--
    ============================================================
                     MainResourcesGeneration
    This is here temporarily to fix an issue in the WinFx 
    targets file where adding and removing resources does not
    cause a resource generation unless the images hapeen to have
    a newer timestamp than the generated .resources file
    ============================================================
    -->
  <Target Name="MainResourcesGeneration" Inputs="@(MainEmbeddedFiles);$(MSBuildProjectFile)" Outputs="$(IntermediateOutputPath)$(_ResourceNameInMainAssembly)" Condition="'@(MainEmbeddedFiles)'!=''">

    <!--
        This generates .resources file containing all the resources that are to be 
        embedded in the main assembly and dont need to be localized
    -->

    <Message Text="(in) EmbeddedFiles: '@(MainEmbeddedFiles)'" Condition="'$(MSBuildTargetsVerbose)'=='true'"/>

    <ResourcesGenerator
                   ResourceFiles="@(MainEmbeddedFiles)"
                   OutputPath="$(IntermediateOutputPath)"
                   OutputResourcesFile="$(IntermediateOutputPath)$(_ResourceNameInMainAssembly)"
                   Condition="'@(MainEmbeddedFiles)' != ''">

      <!-- Put the generated files in item FileWrites so that they can be cleaned up appropriately in a next Rebuild -->
      <Output ItemName="FileWrites" TaskParameter="OutputResourcesFile" />

    </ResourcesGenerator>

    <ItemGroup>
      <EmbeddedResource Include="$(IntermediateOutputPath)$(_ResourceNameInMainAssembly)">
        <GenerateResource>false</GenerateResource>
        <Type>Resx</Type>
        <WithCulture>false</WithCulture>
        <OutputResource>$(IntermediateOutputPath)$(_ResourceNameInMainAssembly)</OutputResource>
      </EmbeddedResource>
    </ItemGroup>

  </Target>

  <PropertyGroup>
    <ProjectDesignTimeAssemblyResolutionSearchPaths Condition=" '$(WindowsPhoneRegistryBase)' != '' and '$(WindowsPhoneRegistryBaseVersion)' != '' ">
      {CandidateAssemblyFiles};
      $(ReferencePath);
      {HintPathFromItem};
      {TargetFrameworkDirectory};
      {Registry:$(FrameworkRegistryBase),$(TargetFrameworkVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};
      {Registry:$(WindowsPhone71RegistryBase),$(WindowsPhone71RegistryBaseVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};
      {Registry:$(WindowsPhone7RegistryBase),$(WindowsPhone7RegistryBaseVersion),$(AssemblyFoldersSuffix)$(AssemblyFoldersExConditions)};
      {RawFileName};
      $(TargetDir)
    </ProjectDesignTimeAssemblyResolutionSearchPaths>
  </PropertyGroup>

  <!--
      The ImplicitlyExpandTargetFramework target will expand all 
      of the dll reference assemblies in the TargetFrameworkDirectory 
      for the project and place the items into the ReferencePath itemgroup 
      which contains resolved items.
    -->
  <PropertyGroup>
    <ImplicitlyExpandTargetFramework Condition="'$(ImplicitlyExpandTargetFramework)' == ''">true</ImplicitlyExpandTargetFramework>
    <ImplicitlyExpandTargetPlatform Condition="'$(ImplicitlyExpandTargetPlatform)' == ''">true</ImplicitlyExpandTargetPlatform>
    <WindowsPhoneSDK_MetadataPath Condition="'$(WindowsPhoneSDK_MetadataPath)' == ''">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Microsoft SDKs\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)', 'InstallationFolder', null, RegistryView.Registry32))</WindowsPhoneSDK_MetadataPath>
    <ResolveReferencesDependsOn>
      $(ResolveReferencesDependsOn);
      ImplicitlyExpandTargetFramework;
      ImplicitlyExpandTargetPlatform
    </ResolveReferencesDependsOn>

    <ImplicitlyExpandTargetFrameworkDependsOn>
      $(ImplicitlyExpandTargetFrameworkDependsOn);
      GetReferenceAssemblyPaths
    </ImplicitlyExpandTargetFrameworkDependsOn>
  </PropertyGroup>
  <Target Name="ImplicitlyExpandTargetFramework"
       Condition="'$(ImplicitlyExpandTargetFramework)' == 'true'"
       DependsOnTargets="$(ImplicitlyExpandTargetFrameworkDependsOn)"
    >
    <ItemGroup>
      <ReferenceAssemblyPaths Include="$(TargetFrameworkDirectory)"/>
      <ReferencePath Include="%(ReferenceAssemblyPaths.Identity)\*.dll">
        <CopyLocal>false</CopyLocal>
        <ReferenceGrouping>$(TargetFrameworkMoniker)</ReferenceGrouping>
        <ReferenceGroupingDisplayName>$(WindowsPhoneFxReferencesDisplayName)</ReferenceGroupingDisplayName>
        <ResolvedFrom>ImplicitlyExpandTargetFramework</ResolvedFrom>
      </ReferencePath>
    </ItemGroup>

    <ItemGroup>
      <_ResolveAssemblyReferenceResolvedFiles Include="@(ReferencePath)"
         Condition="'%(ReferencePath.ResolvedFrom)' == 'ImplicitlyExpandTargetFramework'"/>
    </ItemGroup>
  </Target>

  <!--
      The ImplicitlyExpandTargetPlatform target will expand all
      of the winmd files in the windows phone SDK and add them the the
      ReferencePath item which is the itemgroup which contains
      resolved items.
    -->
  <Target Name="ImplicitlyExpandTargetPlatform"
     Condition="'$(ImplicitlyExpandTargetPlatform)' == 'true'"
    >
    <ItemGroup>
      <ReferencePath Include="$(WindowsPhoneSDK_MetadataPath)\Windows Metadata\*.winmd">
        <WinMDFile>true</WinMDFile>
        <CopyLocal>false</CopyLocal>
        <ReferenceGrouping>$(TargetPlatformMoniker)</ReferenceGrouping>
        <ReferenceGroupingDisplayName>$(TargetPlatformIdentifier)</ReferenceGroupingDisplayName>
        <ResolvedFrom>ImplicitlyExpandTargetPlatform</ResolvedFrom>
        <IsSystemReference>True</IsSystemReference>
      </ReferencePath>
    </ItemGroup>

    <Message Importance="Low" Text="Including @(ReferencePath)"
      Condition="'%(ReferencePath.ResolvedFrom)' == 'ImplicitlyExpandTargetPlatform'"/>

    <ItemGroup>
      <_ResolveAssemblyReferenceResolvedFiles Include="@(ReferencePath)"
        Condition="'%(ReferencePath.ResolvedFrom)' == 'ImplicitlyExpandTargetPlatform'"/>
    </ItemGroup>
  </Target>

  <!-- ============================================ -->
  <!-- Output group including Winmd artifact files. -->
  <!-- ============================================ -->

  <PropertyGroup>
    <CopyWinmdArtifactsOutputGroupDependsOn>
      $(CopyWinmdArtifactsOutputGroupDependsOn);
      $(AllOutputGroupsDependsOn)
    </CopyWinmdArtifactsOutputGroupDependsOn>
  </PropertyGroup>

  <Target
      Name="CopyWinmdArtifactsOutputGroup"
      DependsOnTargets="$(CopyWinmdArtifactsOutputGroupDependsOn)"
      Returns="@(CopyWinmdArtifactsOutputGroupOutputs)">

    <ItemGroup>
      <CopyWinmdArtifactsOutputGroupOutputs Include="@(FinalWinmdExpArtifacts ->'%(FullPath)')">
        <TargetPath>%(FinalWinmdExpArtifacts.DestinationSubDirectory)%(FinalWinmdExpArtifacts.Filename)%(FinalWinmdExpArtifacts.Extension)</TargetPath>
      </CopyWinmdArtifactsOutputGroupOutputs>
    </ItemGroup>

  </Target>
  <PropertyGroup>
    <_GetPackagePropertiesDependsOn>
      GetPackagingOutputs;
      $(_GetPackagePropertiesDependsOn);
    </_GetPackagePropertiesDependsOn>
  </PropertyGroup>

  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\XNA Game Studio\$(TargetFrameworkVersion)\Microsoft.Xna.GameStudio.Content.targets" Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\XNA Game Studio\$(TargetFrameworkVersion)\Microsoft.Xna.GameStudio.Content.targets')"/>
  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\Microsoft.$(TargetFrameworkIdentifier).PostImport.targets" Condition="Exists('$(MSBuildExtensionsPath32)\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\Microsoft.$(TargetFrameworkIdentifier).PostImport.targets')"/>

  <Import Project="$(MSBuildExtensionsPath32)\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\ImportAfter\*" Condition="'$(ImportByWildcardAfterWindowsPhoneCommonTargets)' == 'true' and exists('$(MSBuildExtensionsPath32)\Microsoft\$(TargetFrameworkIdentifier)\$(TargetFrameworkVersion)\ImportAfter')"/>

</Project>
